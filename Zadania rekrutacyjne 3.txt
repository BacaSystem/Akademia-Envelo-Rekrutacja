Rozwiązania zadań proszę zacommitować na repozytorium GIT.


1.
1.A. W jakim celu używa się klas abstrakcyjnych, a w jakim interfejsów?
Oba typy są używane w podobnych celach - służą jako wzorzecz do konstruowania obiektów, jednak jest kilka rzeczy które odróżnia interfejs od klasy abstrakcyjnej.
Po pierwsze interfejs nie może posiadać pól w odróżnieniu do klasy abstrakcyjnej, której pola klasy mogą definiować dane z jakich składać się będzie każdy obiekt. Interfes może zawierać jedynie stałe pola oraz deklaracje metod.
Z obu typów nie da się utworzyć obiektu (bezpośrednio), a ponadto w przypadku języka Javy, gdzie nie występuję wielodziedziczenie, wykorzystanie kilku klas abstrakcyjnych wiąże się z mało czytelną hierarchią dziedziczenia, w odróżnieniu do interfesjów, których można implementować wiele w jednym obiekcie.
W klasie abstrakcyjnej nie wszystkie metody muszą być abstrakcyjne, oznacza to że wybrane metody w takiej klasie mogą posiadać deklaracje - ciało funkcji. Dodatkowo klasa abstrakcyjna jak każda klasa może zawierać konstruktor, wywoływany podczas tworzenia obiektu dziedziczącego po niej.  
W przypadku interfejsu, wszystkie metody są domyślnie publiczne (choć od nowszych wersji dopuszczalne są metody prywatne i statyczne), podczas gdy w klasach abstrakcyjnych pola i metody mogą mieć zwyczajne zasady restrykcji danych.

Podsumowując interfejs używany jest do dodawania konkretnych zachowań w klasach, podczas gdy klasa abstrakcyjna używana jest raczej do tworzenia określonej hierarchii, w której współdzielimy część kodu.
1.B. Czym różni się tablica od listy liniowej?
Tablica jest to struktura danych przechowywana w pamięci komputera jako całkowity blok danych. Zerowy indeks tablicy wskazuje na adres komórki pamięci w której to rozpoczyna się nasz blok danych. W związku z tą cechą niezwykle wydajną i szybką operacją jest odczyt z tablicy, gdyż wystarczy podać jej indeks (komórkę pamięci przesuniętą ileś razy o rozmiar typu danej), aby odnaleźć daną wartość, bez przeszukiwania tablicy.
Niestety w związku z taką budową tej struktury, operacje dodawania oraz usuwania elementów wiążą się z reorganizacją poszczególnych elementów, wymuszając nijako iteracyjne przechodzenie po jej elementach.
Lista również jest strukturą danych. Jej każdy element przechowuje w pamięci swoją wartość oraz wskażnik na adres następnego elementu. Z tego wynika bardzo wydajna możliwośc dodawania i usuwania elementów poprzez przekierowanie wskaźników, jednak odczyt danych z listy wiąże się z iteracyjnym przejściem po jej elementach.

2.
Mając tablicę int[] numbers, wypełnioną liczbami całkowitymi i posortowaną malejąco ( numbers[i] > numbers[i+1] ), sprawdź czy występuje w niej liczba int x. Metoda powinna zwracać wartość TRUE, jeśli dana liczba występuje oraz FALSE w przeciwnym wypadku. W rozwiązaniu zależy nam na jak najmniejszej złożoności obliczeniowej (priorytet) oraz pamięciowej. Podaj szacowaną złożoność obliczeniową oraz pamięciową. Poniżej sygnatura metody do napisania.

private boolean search(int[] numbers, int x){
    int leftIndex = 0;
        int rightIndex = numbers.length - 1;

        while (leftIndex <= rightIndex){
            int index = leftIndex + (rightIndex - leftIndex) / 2;

            if(x > numbers[index]){
                rightIndex = index - 1;
            } else if (x < numbers[index]) {
               leftIndex = index + 1;
            }
            else {
                return true;
            }
        }
        return false;
}

Jest to algorytm przerszukiwania binarnego o złożoności obliczeniowej O(log n) oraz stałej złożoności pamięcowej O(1).

3.
Napisz program, który wykorzysta API Kanye Rest https://kanye.rest/ by każdorazowo zaproponować nową perełkę mądrości od Kanye Westa. Program powinien być obsługiwany z poziomu konsoli i obsługiwać komendę "next" by wywołać następny cytat. Program nie potrzebuje oprawy graficznej. Zwróć uwagę na poprawną architekturę aplikacji oraz na czystość kodu.
Dla chętnych, za dodatkowe punkty: dodaj zapisywanie cytatów w pamięci, by upewnić się, że każdy kolejny cytat jest nowy. 